{"pages":[{"title":"About ikarus-999","text":"Intro. HE11ow World!!안녕하세요 노래, 음악, 작곡을 좋아하는개발자입니다 🕹공부하는게 즐거워서 개발을 시작하게 되었어요 💽I like studying 💻I Like Developing 🖥 Contacts 📫 EMAIL = next.forr@gmail.com","link":"/about/index.html"}],"posts":[{"title":"R 끄적여보기","text":"R 시작해보기R 변수 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137v1 &lt;-c(0, 1, 2, 3, NA) # 벡터v2 &lt;- 'a' # 동적 변수에 문자 assignv2 = 'a' # 정적 변수rm(v1, v2) # 변수 지우기v1 &lt;- c(0, 1, 2, 3)v2 &lt;- c(0, 1, 3, NA) # Errorv3 &lt;- c(0, 1, 3, NULL) # okmean(v1)mean(v2) # Errormean(v3) # okTRUE | TRUE # TRUETRUE | FALSE # TRUE!TRUE # 뒤집기 연산!FALSE# 범주형 변수key &lt;- factor('m', c('m', 'f'))nlevels(key)levels(key)[1] # 1레벨 추출levels(key)[2] # 종류 추출levels(key) &lt;- c('m', 'f')#vectorx &lt;- c(1,2,3,4,5)xy &lt;- c(1,2,3,4,&quot;a&quot;)ynames(x) &lt;- c(&quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;d&quot;,&quot;e&quot;)xx[1]x[2]x[-1]x[-2]x[1:3]x[3:5]x[&quot;a&quot;]names(x)[2]length(x)nrow(x)NROW(x)seq(1,10) # rangeseq(1:10)seq(1,10,1)seq(1,10,3)NROW(seq(1,10,3))rep(1:10, times=2) #반복rep(1:10, each=2)rep(1:10, each=2, times=2)#listx &lt;- list(name=&quot;jo&quot;, he=&quot;999&quot;)xx$namex$hex[1]x[2]x[[1]] # 인덱싱x[[2]]y &lt;- list(name=&quot;k&quot;, he=c(1,2,3))yy[[1]]y[[2]]z &lt;- list(c(&quot;a&quot;,&quot;b&quot;), c(1,2,3,4))zz[[1]][2]z[[2]][-1]z[[2]][2:4]length(z[[1]])length(z[[2]])#matrixmatrix(c(1,2,3,4,5,6,7,8,9,10), nrow=2)matrix(c(1,2,3,4,5,6,7,8,9,10), nrow=5)m &lt;- matrix(1:9, nrow=3, dimnames=list(c(&quot;a&quot;,&quot;b&quot;,&quot;c&quot;),c(&quot;A&quot;,&quot;B&quot;,&quot;C&quot;)))mrownames(m)colnames(m)m[1:2,]m[,1:2]m[1,1]m[3,3]m[-1,]m[,-2]m[-1,-2]m[-1,-3]m[m[,3]&gt;8,]#m[m[2:3]2]m[m[,3]&gt;=8,c(1,2)]m[c(2,3),c(1,2)]m[m[,3]&gt;=8,m[1,]&lt;5]mm[c(2,3),c(1,3)]#arrayarray(1:12, dim=c(3,4))x &lt;- array(1:12, dim=c(2,2,3))xx[,,2]m[1,]m1 &lt;- matrix(c(1,2,3,4,5,6,7,8,9), nrow=5)m1name &lt;- c(&quot;kim&quot;, &quot;lee&quot;, &quot;park&quot;)age &lt;- c(10,20,30)gender &lt;-factor(c(&quot;M&quot;,&quot;F&quot;,&quot;M&quot;))df &lt;- data.frame(name, age, gender)dfstr(df)df[df$age &gt;= 20 &amp; gender == &quot;F&quot;, c(&quot;name&quot;,&quot;age&quot;)]df[df$age &gt;= 20 &amp; gender == &quot;F&quot;, &quot;name&quot;]df[df[,2]&gt;=20 &amp; df[,3] == &quot;F&quot;, c(1,2)]","link":"/2020/11/29/R-%EB%81%84%EC%A0%81%EC%97%AC%EB%B3%B4%EA%B8%B0/"},{"title":"firstpost1","text":"HEXO 블로그 설치와 사용법새 글 쓰는 법1$ hexo new [레이아웃이름] &quot;새 포스트이름&quot; 레이아웃 디폴트(바로 발행) : post 바로 발행되지 않는 글 : draft 1$ hexo publish &quot;새 포스트이름&quot; 으로 draft에서 publish 합니다. publish는 잘 쓰지 않는다 파일명 에러나기 때문. 그냥냅다 MarkDown으로 쓰고 hexo g -d로 해버림","link":"/2020/10/24/firstpost1/"},{"title":"GAN프로젝트_try","text":"Style GAN toy 프로젝트StyleGAN의 특징 이미지를 Style의 조합으로 보고Generator의 각 Layer마다 Style 정보를 입히는 방식으로 이미지 합성이 때 각 Layer에서 추가되는 Style은 이미지의 Coarse Feature(포즈, 성별 등)부터Fine Detail(머리색, 피부톤 등)까지각기 다른 Level의 Visual 속성들을 조절 가능StyleGAN은 생각보다 안정적이고 높은 퀄리티의 이미지 생성 네트워크 구조(Module) GAN이란 어떤 것일까??? Instance Norm? Generator 구조 설명 왼쪽이 Traditional Network, 오른쪽이 이 논문에서 제안한 Style-gased Generator. 왼쪽 네트워크와 오른쪽에 Synthesis Network가 똑같은 구조를 갖고 있지만,이전 GAN에서는 Latent z를 바로 Input으로 넣어줬던 것과는 다르게,StyleGAN에서는 학습된 Constant, (w) 값을 입력으로 사용함. 새롭게 Mapping Network와 Noise가 추가됨.. W를 Feature에 매핑하는 경우W는 Z처럼 고정된 분포를 따르지 않음. Sampling density는 학습된 Piecewise Continuous Mapping f(z)(f는 Mapping Network 입니다)에 의해 정해짐. 따라서, Warping(틀어짐)이 많이 일어나지 않음.그렇기 때문에 Factors of variation은 더욱 Linear하고, Disentangled (얽히지 않음).이것이 바로 z를 곧바로 Feature에 매핑하는 것보다 w에 매핑하는 것의 장점입니다 기존의 Generator (a)는Input Latent Vector (z)가 직접 Convolution, Upsampling 등을 거쳐 이미지로 변환되는 구조. Style-based Generator (b) 의 경우,(z)가 Fully-connected Layer로 구성된 Mapping Network을 거쳐Intermediate Latent Vector (w) 먼저 변환. (w)는 Constant Tensor가 이미지로 변환되는 과정에서스타일을 입히는 역할을 수행. 다양한 스타일의 이미지를 생성. Style Transfer를 실시간으로 가능케하는 Adaptive Instance Norm Synthesis Network (합성 네트워크)z를 중간 latent space W에 매핑을 한 뒤에 이 w는 “A”를 거쳐서 style, y=(ys,yb)로 변형됨. 이때 A는 학습된 affine transform 임. 그리고 이 style들은AdaIN(adaptive instance normalization) opeartion을 control 함. AdaIN은 style transfer를 할 때 많이 쓰이는 방법으로, 임의의 style transfer를 실시간으로 가능하게 함.여기서 feature map xi는normalized 된 다음에, style로 변환된 두 y로 scaled, biased 됨. (style이 입혀짐)이 과정을 매 layer 마다 반복함. 그리고 이러한 방법은 scale-specific control 을 가능하게 함. To be continued…","link":"/2020/11/17/GAN%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-try/"},{"title":"TF2","text":"Tensorflow 2.x 사용법Tensor 생성 tf.constant() : list, tuple, Array 를 Tensor로 바꿈 tensor = tf.constant(arr) tensor.dtype : 데이터 타입 확인 tf.cast(tensor, dtype=tf.uint8) : TF int8로 데이터타입 바꾸기 tensor.numpy() : numpy array로 바꾸기 Tensor에 랜덤한 숫자들 생성 numpy에서는 기본적인 normal distribution 생성np.random.randn(9) : 9개의 불연속적이며 일정한 분포 난수 생성 Distribution에 따른 난수 생성 tf.random.normal중심극한 이론에 의한 연속적인 모양 tf.random.uniform불연속적이며 일정한 분포","link":"/2020/11/22/TF2/"},{"title":"fpost2","text":"머신러닝과 딥러닝의 차이머신러닝 머신러닝은 정형 데이터 표 형태의 데이터 딥러닝은 비정형 데이터 그림, 사진, 오디오 형태의 자연 데이터 머신러닝 기초 준비물 충분한 용량(RAM 32GB++, SSD 512GB++, i7-10Gen++)의 데스크탑 권장! 가장 먼저 파이썬, 텐서플로우 를 설치합니다. 설치 버전 확인!! 매우 중요합니다! 파이썬 텐서플로우 넘파이 &amp; 싸이킷런 파이썬 버전을 여러개 설치 가능합니다. 이때는 환경 변수, IDE 경로 셋팅이 중요합니다. 윈도우라면 CMD보다는 powershell을 쓰는것이 편합니다. 제일 쉬운 방법은 아나콘다🛎… 하지만 용량이 큽니다. 써본 결과 리눅스에 도커가 최적 환경입니다⚙️. 추후 포스팅 예정 입니다.📯 Lets Burn the GPU!!🔥🔥🔥(TF2.0 wow!!)123456789101112131415161718192021import sysimport numpy as npimport tensorflow as tffrom datetime import datetime# tensorflow 실행모드를 확인합니다print(tf.executing_eagerly())shape = (int(10000), int(10000))startTime = datetime.now()with tf.device(&quot;/gpu&quot;): random_matrix = tf.random.uniform(shape=shape, minval=0, maxval=1) dot_operation = tf.matmul(random_matrix, tf.transpose(random_matrix)) sum_operation = tf.reduce_sum(dot_operation)result = sum_operationprint(result)print(&quot;\\n&quot; * 2)print(&quot;Time taken:&quot;, datetime.now() - startTime)print(&quot;\\n&quot; * 2)","link":"/2020/10/24/fpost2/"},{"title":"fpost3","text":"일상을 끄적이다 - Mel Spectrogram 자동 분석을 위한 test page 입니다.M2U - March Of Fear비탄으로 가득 찬 이 도시 안에 떨어지는 Melody, 감정을 연기하는 춤추는 Endless rain… 거짓말로 얼룩진 관계들 속에 웃을 수 있는 거야? 세계를 노래하는 The March of Fear. We live in the tragedy! 유명한 비극과 같은 잔혹한 세계 속에 우리는 웃음짓고 있어. 이 세계를 비웃는 고결한 수호자들에게 지켜낼 것들은 두려웠던 자신뿐이니까! 숨을 멈춘 사람들 속에서 청명하게 울려퍼지는 Aria… 병든 마음으로 가득찬 이 세계에 폭격을 날려! 지금 웃고 있는 너도 Sociopath, 알잖아? 우리는 이 곳에 생명이 깃든 포성을 던져! 에픽세븐 OST 「Promise」깊은 절망 속에 갇혀 쓰러져 가는 나의 두 손을가만히 잡아 준 따스한 너의 온기를 아직난 기억해Now I can hear you눈을 감으면손 끝에서 널 느껴Now I can hear youI can find you이젠 알 수 있어 약속해 Promise I promise 잊지 않을게우리 함께 나눈 약속들을Promise I promise 어둠을 지난N 번째 하늘 아래 이곳에끝이 보이지 않아도 때론 지쳐서 주저 앉아도약속해 희망을 우리 마음에 간절히 모아빛을 향해Now I can hear you눈을 감으면손 끝에서 널 느껴Now I can hear youI can find you이젠 알 수 있어약속해 Promise I promise 잊지 않을게우리 함께 나눈 약속들을Promise I promise 어둠을 지난N 번째 하늘 아래 이곳에 다시 시작된 시간 다시 걸어가는 길함께하기에 나는 빛날 수 있어멀리 조금씩 보여 따뜻한 파란 빛이우리 마음을 여기에 모아 시작해 한번 더 약속해 Promise I promise 잊지 않을게우리 함께 나눈 약속들을Promise I promise 어둠을 지난N 번째 하늘 아래 약속들을 Promise I promise 어둠을 지난N 번째 하늘 아래 이곳에 Mel Spectrogram 분석 중인 음악입니다. GPU와 스토리지 지원좀 부탁드립니다.","link":"/2020/10/26/fpost3/"},{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/2020/10/24/hello-world/"},{"title":"딥러닝-입문과-준비3","text":"딥러닝 시작해보기-3차원수 늘리기, 줄이기(TF2.x)1234567x = tf.expand_dims(x, 1)x.shape # (x.shape, 1)x[..., tf.newaxis].shape # (x.shape, 1)np.squeeze(x[0]).shape # x.shape 차원 줄이기 TF2.x LayersConvolution filters : layer에서 출력될때 몇개의 filter kernel_size : filter(weight) 의 사이즈 strides : 몇 개의 pixel만큼 skip하면서 sliding window 할 것인지 padding : same, zero activation : 활성화 함수(Linear function은 층을 쌓는 의미가 없다) to be Continued…","link":"/2020/11/23/%EB%94%A5%EB%9F%AC%EB%8B%9D-%EC%9E%85%EB%AC%B8%EA%B3%BC-%EC%A4%80%EB%B9%843/"},{"title":"딥러닝 입문과 준비2","text":"딥러닝 시작해보기-2Broadcast두개의 행렬 shape가 서로 달라도한쪽의 차원이 같거나, 연산하는 값이 한 개일때shape에 맞게 복사해서 연산함 123456789101112131415161718192021arr = np.arange(6).reshape(-1, 3)# [[0, 1, 2], # [3, 4, 5]]arr + 3# [[3, 4, 5],# [6, 7, 8]]arr * 3# [[0, 3, 6],# [9, 12 15]arr + np.array([1, 2, 3])# [[1, 3, 5],# [4, 6, 8]]np.add(arr, 1)# 모든 원소에 1을 더함np.multiply(arr, 3)# 모든 원소에 3을 곱함 argmax, argmin 배열의 큰 값이나 작은 값의 index return 1234arr = np.array([1, 4, 6, 54, 3, 2])np.argmax(arr) # 54np.argmin(arr) # 1np.unique(arr) # 유일한 값 출력","link":"/2020/11/22/%EB%94%A5%EB%9F%AC%EB%8B%9D-%EC%9E%85%EB%AC%B8%EA%B3%BC-%EC%A4%80%EB%B9%842/"},{"title":"딥러닝 입문과 준비","text":"딥러닝 시작해보기Tensor 이해하기 차원 0차원(상수) : Scalar값 1차원(리스트 씌운 상수), 2차원(2d), 3차원(3d), 4차원(4-d), n차원(n-d) : Tensor Numpy로 Tensor 표현과 응용이 가능 123456import numpy as nparr = np.array([[3, 6, 9], [2, 4, 8]])print(arr.dtype) # dtype('float64')print(arr.shape) # (2, 3)print(arr.size) # 2 * 3 = 6 차원 늘리기와 줄이기 reshape, -1 활용 123arr.reshape(-1) # 1차원으로 펼치기arr.reshape(-1, 3) # 첫번째 차원은 알아서, 두번째 차원은 shape 3 Ravel() : arr의 차원을 1로 바꿈(==&gt; Flatten) 123arr = np.array([[1, 2, 3], [4, 5, 6]]) # (2, 3)arr.ravel()arr.shape #(6, ) np.expand_dims() : 값을 유지하고 차원만 늘릴때 12arr = np.expand_dims(arr, -1) #(6, 1)arr.shape numpy array를 빠르게 채우는 방법! 1234567891011121314# 0으로 채우기arr2 = np.zeros([3, 4]) # 3 * 4의 0이 채워진 배열one2 = np.ones([3, 4]) # 3 * 4의 1로 채워진 배열five2 = np.ones([3, 4]) * 5 # 1로 채운 값에 5를 다 곱함arr2 = np.arange(n, m) # n ~ m-1까지의 수로 배열 채우기# array([n ~ m-1])arr = np.arange(5, 11).reshape(2, -1) # 5 ~ 10 : 6개의 숫자, (2, 3)arr # array([5, 6, 7] # [8, 9, 10]) 모양이 맞지 않으면 Error…5, 6, 7, 8, 9는 5개의 숫자5 * 1 만 가능한. Index &amp; slicing 123456789101112131415# 리스트 인덱스 &amp; 슬라이싱nums = [2, 3, 4, 5, 6]nums[:-1] # 마지막 숫자 전까지 표시nums[::-1] # 리스트 안의 숫자를 거꾸로 표현nums = [[1, 2, 3], 4, 5, 6, 7]print(nums[0][1]) = 2 # 첫번째 리스트 안의 인덱스가 1인 숫자arr = np.array([5, 6, 7], [8, 9, 10])print(arr[1, 2]) # 10 --&gt; 인덱싱 [행, 열]print(arr[1:, 1:]) # [[9, 10]] Boolean Indexing1234data = np.random.randn(3, 3)print(data&lt;=0) # False, True로 나옴data[data &lt;=0] = 1 # 0 이하인 것을 1로 채우다","link":"/2020/11/22/%EB%94%A5%EB%9F%AC%EB%8B%9D-%EC%9E%85%EB%AC%B8%EA%B3%BC-%EC%A4%80%EB%B9%84/"},{"title":"딥러닝-입문과-준비4","text":"딥러닝 시작해보기-4인공신경망과 손실함수 인공신경망의 기본 구조 뇌의 학습방법을 수학적으로 모델링한 기계학습 알고리즘 기본 구조 : y = Wx+b\\(x_i\\) : 입력, \\(w_i\\): 가중치, b : bias, f: 활성화함수u : 결합(Net), z: 출력 뉴런에는 선형 결합과 활성화 함수 기능이 들어있음 입력층, 은닉층, 출력층으로 구성됨 각 노드의 뉴런 출력은 직접 전달되는 정보에만 의존할 뿐 다른 노드와는 무관 그래서? 병렬처리가 가능함. 손실 함수(Loss or Cost function) 신경망의 출력값과 실제 결과값의 차이를 정의하는 함수 신경망 학습목표는 손실함수를 최소화 하는 방향으로 움직여야 함 SGD, Adam 등의 학습 최적화 알고리즘 손실 함수 회귀(Regression)제곱 오차(MSE) 사용, 최근에는 rmse, mae의 장점이 있는 Huber Loss 사용하는 추세 Huber Loss?MAE + MSE -&gt; for Time Series Data!! 분류(Classification)활성화 함수 : softmax, 손실함수 : cross-entropy 알고리즘과 역전파 학습 알고리즘 경사 하강법: 기울기를 이용하여 손실함수 S(\\theta) 값을 최적화 gradient(기울기)의 반대 방향으로 일정 크기만큼 이동하는 것을 반복하여손실함수의 값을 최소화하는 \\theta의 값을 찾음 \\[\\theta = \\theta - \\eta \\nabla_\\theta S(\\theta)\\] 이 떄 \\eta 는 미리 정해진 learning rate(step size) 이고 보통 1e-3 ~ 1e-4 정도를 사용 역전파 계산 그래프 노드는 연산을, 엣지는 데이터의 흐름방향 sigmoid 함수 역전파 합성함수 미분법(Chain Rule) 행렬연산과 역전파 1 이진분류 2-layer NN 역전파 to be continued…","link":"/2020/11/24/%EB%94%A5%EB%9F%AC%EB%8B%9D-%EC%9E%85%EB%AC%B8%EA%B3%BC-%EC%A4%80%EB%B9%844/"},{"title":"training_pc","text":"딥러닝 공부 후기 비정형 데이터를 다룰려면 GPU는 필수다. Why GPU ?? CPU보다 더 빠른 병렬 처리 가능 행렬곱 계산이 CPU보다 훨씬 빠름 계산 그래프 빌드, 처리 속도가 빠름. 비정형 데이터 처리엔 GPU가 필수 음성 딥러닝, 나도 해볼까?음성 딥러닝 음성 딥러닝은 결코 쉽지 않다. 딥러닝계의 보스급.신호처리 배워야 그나마 수월하다.초반 Feature Extraction 경험을 쌓는것을 권장한다.RNN계열의 LSTM으로 시작. 하지만,Attention, Transformer 날코딩 등 논문 구현 경험이 매우 중요하다.Mel Spectrogram을 한다 해도 원리를 잘 알아야 나중에 모델링과 데이터 분해가 쉽다. 딥러닝 입문 방법딥러닝 입문 하려면 수학은 필수. 정말 중요. 논문 구현 시도해보기1논문 구현 시도해보기2 어떤 논문에는 파라미터 하나도 없는 것도 있다.레이어 구조도만 있고 파라미터가 없는 것은 진짜 구현난이도 보스급. 딥러닝 자격증 취득 후기이것이 바로 딥러닝 자격증!! 문제 유형 Category 1: Basic model Category 2: Model from learning dataset Category 3: Image classificationConvolutional Neural Network with real-world image dataset Category 4: Natural language processing (NLP)NLP Text Classification with real-world text dataset Category 5: Time series, sequences and predictionsSequence Model with real-world numeric dataset 이 시험은 응시자가 TensorFlow 2.x를 통해 모델을 빌드하여 문제를 해결할 수 있는지테스트합니다. 머신러닝(ML) 및 딥러닝의 기본 원칙 TensorFlow 2.x에서 ML 모델 개발하기 심층신경망 및 합성곱 신경망(CNN)을 통한 이미지 인식, 객체 탐지, 텍스트 인식 알고리즘 빌드 컴퓨터가 정보를 ‘보는’ 방식과 플롯 손실 및 정확도 이해할 수 있도록 다른 크기 및 형태의 실제 이미지를 활용하여 합성곱에서 이미지의 경로를 시각화 과적합을 예방하기 위한 확장 및 드롭아웃과 같은 전략 탐색 TensorFlow를 이용하여 자연어 처리 문제를 해결하기 위해 신경망 적용 Google 공식 페이지 발췌 합격 점수 / 규칙 허용된 인터넷 브라우징은 Tensorflow document, 총 100점 만점에 90점 커트라인 난이도는 category 5가 가장 높음 시험 시간 : 5시간 (컴퓨터 딥러닝 훈련시간 포함) 따면 좋은 점 개발자 네트워크에 join 할 수가 있어요~ 자격증 네트워크 참고문서 그럼 20000~!","link":"/2020/11/16/training-pc/"},{"title":"딥러닝-입문과-준비5","text":"딥러닝 시작해보기-5선형대수 배워보기(행렬을 아무리 곱하고 더해도 선모양)Scala : 크기만 존재하는 양Vector : 속도, 위치이동, 힘, 공간뒤틀림과 같이 크기와 방향이 모두 존재하는 양 Norm ? n차원 벡터 $$\\vec{x} = (x_1, x_2, \\cdots x_n)$$Norm $$\\lVert x \\rVert = \\sqrt{x_1^1 + x_2^2 + \\cdots + x_n^2}$$ “원점 O에서 점\\(x_1, x_2, \\cdots, x_n\\) 까지의 거리” 내적 ? Inner product, Dot product행렬끼리 곱할 때는 차원을 주의한다. A(m, n) * B(n, m) 만 가능 Transpose: 전치행렬(행과 열을 뒤바꿈) A.T numpy 연산(Element-wise operation) np.dot(x, y) (aka 내적, dot-product)와 x * y(element-wise)는 서로 다름. numpy 비교, 논리연산(element-wise operation)numpy Reductions argmax() : 최대값있는 인덱스를 리턴, argmin() : 최소값의 인덱스 리턴 np.all, np.any? ALL : Array내 모든 값이 TRUE인가? any : Array내 값이 하나라도 TRUE인가? np.mean, np.median, np.std 등 통계함수 사용 가능딥러닝에 대한 환상 복잡한 문제도 층을 깊고 넓게 쌓으면 해결된다 –&gt; Gradient Vanhshing, Initialize fault 으하하핰ㅋㅋㅋ $$Sigmoid(z) = \\frac{1} {1 + e^{-z}}$$Sigmoid 도함수의 최대값은 1/4 … –&gt; 그래서 Gradient Vanishing 나는거임 ㅇㅇ 가중치 초기화 초기화의 중요성$$t = wx+b$$ 에서 w가 100, b가 50이라면 x가 0.01이더라도 t는 51이 됨역전파때 sigmoid 함수 통과시키면 $$\\sigma’ (51)$$ 리턴됨하지만 t가 5만 넘어도 $$\\sigma (t)$$ 는 0에 수렴 –&gt; 이것이 바로 Gradient Vanishing… 그래서 입력층의 가중치w를 모두 0으로 리셋!Forward Propagation때 두번째 층 뉴런에 모두 같은 값이 전달됨Backward Propagation때 두째 층 가중치가 모두 똑같이 업데이트 ==&gt; 신경망 표현력 제한 Bias는 0으로 초기화하는게 일반적으로 효율적 가중치 초기화 2 표준 정규분포를 이용한 가중치 초기화Sigmoid함수의 출력값이 극단적으로(0 or 1)에 치우치는 현상 –&gt; Gradient Vanishing 표준편차를 0.01로 하는 정규분포로 초기화가중치가 모여 있음 =&gt; 기울기 소실 문제 어느정도 완화됨 가중치 초기화 3 Xavier초기화 방법(2010) 1w = np.random.randn(n_input, n_output) / (n_input) ** 0.5 Sigmoid와 같은 S자 함수의 경우 출력값들이 정규분포 형태이어야 안정적 학습 가능 Sigmoid function과 Xavier Init방법을 사용했을 경우 그래프 ReLU 계열 함수에는 적절하지 않음layer를 거쳐갈 수록 0에 수렴(converge) 가중치 초기화 4He 초기화 방법(2015) 1w = np.random.randn(n_input, n_output) / (n_input / 2) ** 0.5 RELU + He init –&gt; 10 layer를 거쳐도 표준편차가 0으로 수렴하지 않음 Summary 가중치 초기화는 너무나 중요함 tanh의 경우 Xavier Init 방법이 효율적 ReLU계열 함수에는 He Init 방법이 효율적 최근엔 대부분 He Init를 주로 사용","link":"/2020/11/25/%EB%94%A5%EB%9F%AC%EB%8B%9D-%EC%9E%85%EB%AC%B8%EA%B3%BC-%EC%A4%80%EB%B9%845/"},{"title":"딥러닝-입문과-준비6","text":"딥러닝 시작해보기-6💥Remind!! 딥러닝에 비선형 활성화 함수를 사용하는 이유 선형 함수로는 XOR과 같은 non-linear한 문제는 해결이 안됨;; 그러면 Hidden Layer를 늘리면 되지 않을까? $$f(ax+by) = af(x) + bf(y)$$ 라는 특징 때문에 N-layer 깊이를 아무리 쌓아도 1-Layer로 동작함. 최적화(Opt) 알고리즘 경사하강법(GD)$$\\theta = \\theta - \\eta \\nabla_\\theta S(\\theta)$$ Network의 parameter=$$\\theta $$ 로 할때 손실함수 $$J(\\theta)$$의 값을 최소화하기 위해 기울기$$\\nabla J(\\theta)$$를 이용하는 방법GD에서는 Gradient의 반대 방향으로 일정 크기(lr)만큼 이동하는 것을 반복하여 loss function의 값을 최소화 하는 $$\\theta$$의 값을 찾음, lr $$\\eta$$ 는 보통 1e-3 ~ 1e-4 사이에서 사용함.너무 크면 global minimum을 지나치고 너무 작으면 Local Minimum에 빠짐. 확률적 경사하강법(SGD)전체 Training set을 사용하는 것을 batch Gradient Descent, 계산량이 많아지는 것을 방지하기 위해mini-batch에 대해서만 손실함수를 계산하는 확률적 GD를 사용함.같은 시간에 더 많은 step를 갈 수 있음, 여러번 반복할 경우 batch의 결과와 비슷함 GD vs SGDGD : 확실한데 너무 느림 | SGD : 조금 헤메지만 빠름 Momentum : 현재 Gradient를 통해 이동하는 방향과 별개로 과거의 이동방식을 기억하면서 일종의 관성을 주는 방식 AdaGrad(Adaptive Gradient) 많이 변화했던 변수들은 step size를 작게 하는 것자주 등장하거나 변화를 많이 한 변수들은 optimum에 가까이 있을 확률이 높기 때문에 작은 크기로 이동하면서 미세조절 적게 변화한 변수들은 많이 이동해야할 확률이 높기 때문에 먼저 빠르게 loss값을 줄이는 방식으로 이동하는 방식학습을 계속 진행하면 step size가 너무 줄어드는 단점이 있음. RMSProp합을 지수평균으로 대체하여 Adagrad의 단점을 해결G가 무한정 커지지는 않으면서 최근 변화량의 변수간 상대적인 크기 차이는 유지할 수 있음. AdamMomentum + RMSProp 지금까지 계산해온 기울기의 지수평균을 저장 rmsprop과 유사하게 Gradient의 제곱값의 지수평균을 저장 Overfitting(과적합) Training Set의 지엽적인 특성까지 반영해 Variance High로 Training되어서 Training Set을 암기해버리는 현상 Test Set을 잘 예측하지 못함 주로 표현력이 높은 모델, 즉 파라미터가 많은 모델에 발생 정규화(Regularization) 손실함수에 가중치의 크기를 포함 가중치가 작아지도록 학습한다는 것은 Outlier(Noise)의 영향을 적게 받음 L2 정규화 Rigde Regression L1 정규화Sparse Model에 알맞음.. 작은 가중치들이 거의 0으로 수렴하여 몇개의 중요한 가중치들만 남음. Lasso Regression 미분 불가능한 점이 있기 때문에 Gradient-Base Learning에는 주의.. DropOut각 레이어의 일정 비율로 뉴런의 출력 값을 0으로 만들어 나머지 뉴런들로 학습하는 방법과적합을 효과적으로 예방 가능(Network 내부의 Ensemble 학습으로 볼 수 있음) 역전파는 ReLU처럼 동작Forward Propagation때 시그널을 통과시킨 뉴런은 Backward때도 통과시킴drop된 뉴런은 Backward Propagation때도 시그널 차단 반면, TEST때는 모든 뉴런에 신호를 전달함 Batch Normalization학습하는 이전 층의 파라미터 변화로 현재층의 입력 분포가 바뀌는 현상을 내부 공분산 변화(Internal Covariate Shift)이전 층의 작은 파라미터 변화가 증폭되어 뒷 레이어에 큰 영향을 받음.그래서… BN(2015) Gradient Vanishing, Exploding을 방지하는 대표적인 방법 직접적인 방법임. Training 과정 자체를 안정화시켜 학습속도를 가속화 평균과 분산을 조절하는 과정이 NN 안에 포함 되어 있다는 것이 핵심적 Training할때각 Mini Batch마다 $$\\gamma$$ 와 $$\\beta$$를 구하고 저장해 둠 Test할때구했던 $$\\gamma$$ 와 $$\\beta$$의 평균을 사용 Data Augmentation일종의 Regularization작업, 데이터가 적을 때 사용하면 매우 효과적즉 데이터 변형","link":"/2020/11/27/%EB%94%A5%EB%9F%AC%EB%8B%9D-%EC%9E%85%EB%AC%B8%EA%B3%BC-%EC%A4%80%EB%B9%846/"},{"title":"딥러닝-입문과-준비7","text":"딥러닝 시작해보기-7합성곱(Convolution) Convolution? 정의 합성곱 연산은 두 함수 f, g 가운데 하나의 함수를 반전(reverse), 전이(shift)시킨 다음, 다른 하나의 함수와 곱한 결과를 적분하는 것을 의미한다. 이를 수학 기호로 표시하면 다음과 같다. 또한 g 함수 대신에 f 함수를 반전, 전이 시키는 경우 다음과 같이 표시할 수도 있다. 이 두 연산은 형태는 다르지만 같은 결과값을 갖는다. 위의 적분에서 적분 구간은 함수 f와 g가 정의된 범위에 따라서 달라진다. 또한 두 확률 변수 X와 Y가 있을 때 각각의 확률 밀도 함수를 f와 g라고 하면, X+Y의 확률 밀도 함수는 로 표시할 수 있다. – Wikipedia 무엇인지 모르겠죠? 쉽게 말하자면 기존 MLP에서는 이미지가 살짝이라도 회전이 되거나 위치 이동이 있다면 신경망 자체를 다시 학습해야 하지만 CNN은 이미지의 변화가 있어도 재학습 없어도 가능함. 모든 pixel을 비교할 게 절대 아님. Feature 추출에 중점을 둠. $$C_in x C_out$$ 번의 합성곱 연산 bias는 하나의 벡터 Filter(kernel)의 크기에 따라 영상의 크기가 줄어드는 문제점을 해결하기 위해 padding을 쓴다. 크기가 (2N + 1)인 커널에 상하좌우에 N개 Zero padding을 해주면 된다. Sliding Window 방식으로 커널이 이동되는데 그 크기를 조절하려면 Stride를 쓴다. 너무 크면 출력 Feature Map이 과도하게 줄어드는 경우가 발생한다. 보다 효율적인 Conv 연산을 하기 위해서는 1x1 Conv를 넣는다 연산량, 파라미터 개수를 줄이기 위해 BottleNeck 구조를 활용한다. 하필 1x1 ?? 3x3 filter 한개와 1x1 + 3x3 parameter 비교 그래도 모르겠다면?? 12345678910111213141516import numpy as npnp.random((3, 3)).shape == (np.random((3, 1)) * np.random((1, 3)).shape)&gt;&gt; True# keras# k - kernel_size(ex. 3, 5, 7...)# n_filter - number of filters/channels 필터 갯수conv1_1 = Conv(n_filters, (1, k))(input_1)conv1_2 = Conv(n_filters, (k, 1))(conv1_1)# 왜 병목?conv2 = Conv2D(96, (1, 1), ...)(conv1) # 줄였다가(receptive Field는 그대로, Feature map을 미리 줄임.)conv3 = Conv2D(96, (3, 3), ...)(conv2) conv4 = Conv2D(128, (1, 1), ...)(conv3) # 다시 늘림 항등행렬을 떠올리면 이해가 갈것이다. CNN 만들었는데 너무 느리네? 어떻게 하면 빠르게 할 수 있을까… Conv filter를 더 넓게 쓴다. –&gt; GPU 연산이 쉬워진다 12345# 이렇게 되어있는 걸conv = Conv2D(96, (3, 3), ...)(conv)conv = Conv2D(96, (3, 3), ...)(conv)# 아래처럼 바꾼다.conv = Conv2D(128, (3, 3), ...)(conv) GPU는 병렬로 처리하기 때문에 필터 갯수를 늘리면 더욱 빨라진다. 쉽게 말하면 96개씩 두번보다 128개씩 한번이 더 빠르다. 설명. 96 // 3 = 32 2- layer을 1- layer로 바꿀땐 32 // 2 = 16 16^0.5 = 4 4 * 32 = 128 또 다른 방법각 채널에서 별도의 2d conv를 하는 방법in_channels * channel_multipliter 중간채널은 연결되고 1x1 conv로 out_channels에 매핑 1234# Kerasfrom keras.layers import SeparableConv2Dnet = SeparableConv2D(32, (3, 3))(net)# it's almost 1:1 similar to the simple Keras Conv2D layer 출처 :source1source2","link":"/2020/11/30/%EB%94%A5%EB%9F%AC%EB%8B%9D-%EC%9E%85%EB%AC%B8%EA%B3%BC-%EC%A4%80%EB%B9%847/"},{"title":"딥러닝-입문하기-8","text":"오디오 딥러닝 해보기Reference Digital Signal Processing Lecture https://github.com/spatialaudio/digital-signal-processing-lecture Python for Signal Processing (unipingco) https://github.com/unpingco/Python-for-Signal-Processing Audio for Deep Learning (남기현님) https://tykimos.github.io/2019/07/04/ISS_2nd_Deep_Learning_Conference_All_Together/ 오디오 전처리 작업을 위한 연습 (박수철님) https://github.com/scpark20/audio-preprocessing-practice Musical Applications of Machine Learning https://mac.kaist.ac.kr/~juhan/gct634/ Awesome audio study materials for Korean (최근우님) https://github.com/keunwoochoi/awesome-audio-study-materials-for-korean T Academy(출처) https://tacademy.skplanet.com/live/player/onlineLectureDetail.action?seq=178 1. Digital Signal Processing소리 signal를 어떠한 데이터 타입으로 표현하며, 소리와 관련된 task를 해결하는데 있습니다. 그렇다면 소리는 어떠한 데이터를 가지고 있을까요? Sound?소리는 일반적으로 진동으로 인한 공기의 압축으로 생성됩니다. 그렇다면 압축이 얼마나 됬느냐에 따라서 표현되것이 바로 Wave(파동)인데요. 파동은 진동하며 공간/매질을 전파해 나가는 현상입니다. 질량의 이동은 없지만 에너지/운동량의 운반은 존재합니다. Wave에서 저희가 얻을수 있는 정보는 크게 3가지가 있습니다. Phase(Degress of displacement) : 위상 Amplitude(Intensity) : 진폭 Frequency : 주파수 Sampling샘플링은 무엇일까요?? 아날로그 정보를 잘게 쪼개서 discrete한 디지털 정보로 표현해야합니다. 우리는 무한하게 쪼개서 저장할수 없으니, 어떤 기준을 가지고 아날로그 정보를 쪼개서 대표값을 취하게 됩니다. Convert into a sqeuence of binary values via Sampling and Quantization 1.1. Time domain시간을 기준으로 아날로그 시그널을 쪼개게 되는 것을 의미합니다. Sampling을 통하여 컴퓨터는 소리 sequence를 binary value로 받아드리게 됩니다. Sampling rate : 얼마나 잘게 쪼갤 것인가?잘개 쪼갤수록 원본 데이터와 거이 가까워지기 떄문에 좋지만 Data의 양이 증가하게 됩니다. 만약 너무 크게 쪼개게 된다면, 원본 데이터로 reconstruct하기 힘들어 질 것입니다. Sampling theorem샘플링 레이트가 최대 frequency의 2배 보다 커져야 한다는 것입니다.$ f_{s} &gt; 2f_{m} $ 여기서 $f_{s}$는 sampling rate, 그리고 $f_{m}$은 maximum frequency를 말합니다. Nyqusit frequency = $f_{s}/2$, sampling rate의 절반입니다. 일반적으로 Sampling은 인간의 청각 영역에 맞게 형성이 됩니다. Audio CD : 44.1 kHz(44100 sample/second) Speech communication : 8 kHz(8000 sample/second) 12345# library loadimport soundfile as sfimport librosaimport numpy as npimport matplotlib.pyplot as plt 1filename = &quot;./wav/voice.wav&quot; 12345678# 파일 로드 방법 1y, sr = sf.read(filename, dtype='int16')print(&quot;Sample Rate: &quot;, sr)print(&quot;DATA: &quot;, type(y), y.shape, len(y), y)dur = len(y) / srprint(&quot;dur : &quot;, dur) Sample Rate: 16000 DATA: &lt;class 'numpy.ndarray'&gt; (48944,) 48944 [ -9 1 -5 ... -20 -16 -24] dur : 3.059 1234567# 파일 로드 방법 2y, sr = librosa.load(filename, mono=True, sr=16000)print(&quot;Sample Rate: &quot;, sr)print(&quot;DATA: &quot;, type(y), y.shape, y)dur = len(y) / srprint(&quot;dur : &quot;, dur) Sample Rate: 16000 DATA: &lt;class 'numpy.ndarray'&gt; (48944,) [-2.7465820e-04 3.0517578e-05 -1.5258789e-04 ... -6.1035156e-04 -4.8828125e-04 -7.3242188e-04] dur : 3.059 Resampling샘플링된 데이터를 다시금 더 높은 sampling rate 혹은 더 낮은 sampling rate로 다시 샘플링할수 있습니다. 이때는 일반적으로 interpolation(보간)을 할때는 low-pass filter를 사용합니다.(Windowed sinc function) 12import IPython.display as ipdy_8k = librosa.resample(y, sr, 8000) 1ipd.Audio(y_8k, rate=8000) 1len(y_8k) 24472 12# durationlen(y_8k)/8000 3.059 12y_2k = librosa.resample(y, sr, 4000)ipd.Audio(y_2k, rate=2000) 1len(y_2k) 12236 Nomalization &amp; Quantization시간의 기준이 아닌 실제 amplitude의 real valued 를 기준으로 시그널의 값을 조절합니다. Amplitude를 이산적인 구간으로 나누고, signal 데이터의 Amplitude를 반올림하게 됩니다. 그렇다면 이산적인 구간은 어떻게 나눌수 있을까요?, bit의 비트에 의해서 결정됩니다. B bit의 Quantization : $-2^{B-1}$ ~ $2^{B-1}-1$ Audio CD의 Quantization (16 bits) : $-2^{15}$ ~ $2^{15}-1$ 위 값들은 보통 -1.0 ~ 1.0 영역으로 scaling되기도 합니다. 123# Normalizenormed_wav = y / max(np.abs(y))ipd.Audio(normed_wav, rate=sr) 12345678#quantization 하면 음질은 떨어지지만 light한 자료형이 된다.Bit = 8max_value = 2 ** (Bit-1)quantized_8_wav = normed_wav * max_valuequantized_8_wav = np.round(quantized_8_wav).astype(int)quantized_8_wav = np.clip(quantized_8_wav, -max_value, max_value-1)ipd.Audio(quantized_8_wav, rate=sr) mu-law encoding사람의 귀는 소리의 amplitude에 대해 log적으로 반응합니다. 즉, 작은소리의 차이는 잘잡아내는데 반해 소리가 커질수록 그 차이를 잘 느끼지 못합니다. 이러한 특성을 wave값을 표현하는데 반영해서 작은값에는 높은 분별력(high resolution)을, 큰값끼리는 낮은 분별력(low resolution)을 갖도록 합니다 12def mu_law(x, mu=255): return np.sign(x) * np.log(1 + mu * np.abs(x)) / np.log(1 + mu) 1234567x = np.linspace(-1, 1, 1000)x_mu = mu_law(x)plt.figure(figsize=[6, 4])plt.plot(x)plt.plot(x_mu)plt.show() 12wav_mulaw = mu_law(normed_wav)ipd.Audio(wav_mulaw, rate=sr) to be continued…뒷장에서 계속됩니다.","link":"/2020/12/03/%EB%94%A5%EB%9F%AC%EB%8B%9D-%EC%9E%85%EB%AC%B8%ED%95%98%EA%B8%B0-8/"},{"title":"참고리스트","text":"텐서플로우 개발에 참고할 만한 문서들(References)Tensorflow Tutorial 텐서플로우 튜토리얼 시계열데이터 스터디자료 모음(Transformer) 참고논문1 둘러볼만한 깃헙 둘러볼만한 깃헙2 깃헙 링크2 음성 자연어처리 스터디자료 모음 TacoTron Tensorflow 오디오 딥러닝 참고자료 best VGGish kaggle Dataset 계속 업데이트 예정 입니다.","link":"/2020/12/06/%EC%B0%B8%EA%B3%A0%EB%A6%AC%EC%8A%A4%ED%8A%B8/"},{"title":"딥러닝-입문하기-9","text":"지난번에 이어서 오디오 딥러닝 2번째2. Sound Representation위에서 Sampling된 discrete한 데이터를 이제 우리는 표현이 가능합니다. 그렇다면 어떤 요소를 기반으로 저희가 데이터를 표현해야할까요?, 첫번째는 시간의 흐름에 따라, 공기의 파동의 크기로 보는 Time-domain Representation 방법이 있습니다. 두번째는 시간에 따라서 frequency의 변화를 보는 Time-Frequency representation이 있습니다. 2.1. Time domain - WaveformWaveform의 경우에는 오디오의 자연적이 표현입니다. 시간이 x축으로 그리고 amplitude가 y축으로 표현이 됩니다. 1234import librosa.displayfig = plt.figure(figsize = (14,5))librosa.display.waveplot(y[0:10000], sr=sr) &lt;matplotlib.collections.PolyCollection at 0x7fa325708d50&gt; 정현파 (Sinusoid)모든 신호는 주파수(frequency)와 크기(magnitude), 위상(phase)이 다른 정현파(sinusolida signal)의 조합으로 나타낼 수 있다. 퓨리에 변환은 조합된 정현파의 합(하모니) 신호에서 그 신호를 구성하는 정현파들을 각각 분리해내는 방법입니다. 1234567sr = 16000 # sample rateT = 2.0 # secondst = np.linspace(0, T, int(T*sr), endpoint=False) # time variablex = 0.5*np.sin(2*np.pi*440*t) # pure sine wave at 440 Hz# y = 0.5*numpy.sin(2*numpy.pi*400*t)ipd.Audio(x, rate=sr) # load a NumPy array 1librosa.display.waveplot(x[:50], sr=sr) &lt;matplotlib.collections.PolyCollection at 0x7fa327a01550&gt; 푸리에 변환 (Fourier transform)푸리에 변환(Fourier transform)을 직관적으로 설명하면 푸리에 변환은 임의의 입력 신호를 다양한 주파수를 갖는 주기함수(복수 지수함수)들의 합으로 분해하여 표현하는 것 입니다. 그리고 각 주기함수들의 진폭을 구하는 과정을 퓨리에 변환이라고 합니다. 주기(period): 파동이 한번 진동하는데 걸리는 시간, 또는 그 길이, 일반적으로 sin함수의 주기는 \\(2\\pi /w\\)입니다 주파수(frequency): 1초동안의 진동횟수입니다. 퓨리에 변환의 식을 살펴봅시다. $$y(t)=\\sum_{k=-\\infty}^\\infty A_k , \\exp \\left( i\\cdot 2\\pi\\frac{k}{T} t \\right)$$ 이 식을 하나식 해석해봅시다.\\(k\\)는 \\(-\\infty\\) ~ \\(\\infty\\)의 범위를 가지고 움직입니다.이것은 주기함수들의 갯수입니다. 어떠한 신호가 다른 주기함수들의 합으로 표현되는데, 그 주기함수는 무한대의 범위에 있군요. 그렇다면 \\(A_k\\)은 그 사인함수의 진폭이라고 합니다. 이 식은 시간에 대한 입력신호 \\(y_{t}\\)가 \\(\\exp \\left( i\\cdot 2\\pi\\frac{k}{T} t \\right)\\) 와 진폭(\\(A_k\\))의 선형결합으로 표현됨을 말하고 있군요. 위 그림을 본다면 조금 더 명확히 알수 있을 것 같습니다. 붉은색 라인이 입력신호 \\(y_{t}\\) 입니다. 일반적으로 우리가 다루게 되는 데이터인 음악이나 목소리 같은 데이터 역시 complex tone입니다. 여려개의 주파수영역이 합쳐진 것이죠. 이러한 여러개의 주파수 영역을 분리하자!가 주요한 아이디어입니다. 파란색 주기함수들을 보신다면 여러개의 주기함수들을 찾으실 수 있습니다. 그 주기함수들은 고유의 주파수(frequency)와 강도(amplitude)를 가지고 있고 그것이 파란색의 라인들로 표현되어 있습니다. 진폭에 대한 수식은 다음과 같습니다.$$A_k = \\frac{1}{T} \\int_{-\\frac{T}{2}}^\\frac{T}{2} f(t) , \\exp \\left( -i\\cdot 2\\pi \\frac{k}{T} t \\right) , dt$$여기서 하나의 의문점이 드실것 같습니다. 주기함수의 합으로 표현된다고 했는데 저희가 보고 있는것은 \\(\\exp \\left( i\\cdot 2\\pi\\frac{k}{T} t \\right)\\) 지수함수의 형태이기 때문입니다. 지수함수와 주기함수 사이의 연관관계는 무엇일까요? 그 관계를 찾은 것이 바로 오일러 공식입니다. $$e^{i\\theta} = \\cos{\\theta} + i\\sin{\\theta}$$ 이 식을 위 식처럼 표현한다면 다음과 같습니다$$\\exp \\left( i\\cdot 2\\pi\\frac{k}{T} t \\right) = \\cos\\left({2\\pi\\frac{k}{T}}\\right) + i\\sin\\left({2\\pi\\frac{k}{T}}\\right)$$ 여기서 \\(\\cos{2\\pi\\frac{k}{T}}\\), \\(i\\sin{2\\pi\\frac{k}{T}}\\) 함수는 주기와 주파수를 가지는 주기함수입니다. 즉 퓨리에 변환은 입력 singal이 어떤것인지 상관없이 sin, cos과 같은 주기함수들의 합으로 항상 분해 가능하다는 것입니다. Fourier Transform의 Orthogonal$$y(t)=\\sum_{k=-\\infty}^\\infty A_k , \\exp \\left( i\\cdot 2\\pi\\frac{k}{T} t \\right)$$ 어떠한 주기함수를 우리는 cos과 sin함수로 표현하게 되었습니다. 여기서 한가지 재밌는 점은, 이 함수들이 직교하는 함수(orthogonal)라는 점이다.$${ \\exp \\left(i\\cdot 2\\pi\\frac{k}{T} t\\right) } = orthogonal$$ 벡터의 직교는 해당 벡터를 통해 평면의 모든 좌표를 표현할수 있었다. 함수의 내적은 적분으로 표현할 수 있는데, 만약 구간 [a,b]에서 직교하는 함수는 구간 [a,b]의 모든 함수를 표현할수 있습니다. 위 케이스에서는 cos, sin 함수가 사실상 우리 입력신호에 대해서 기저가 되어주는 함수라고 생각할 수 있습니다. DFT (Discrete Fourier Transform)한가지 의문점이 듭니다. 바로, 우리가 sampling으로 들어온 데이터는 바로 시간의 간격에 따른 소리의 amplitude의 discrete한 데이터이기 때문이다. 그렇다면 위 푸리에 변환 식을 Discrete한 영역으로 생각해봅시다. 만약에 우리가 수집한 데이터 \\(y_{n}\\)에서, 이산 시계열 데이터가 주기 \\(N\\)으로 반복한다고 할때, DFT는 주파수와 진폭이 다른 \\(N\\)개의 사인 함수의 합으로 표현이 가능합니다.$$y_n = \\frac{1}{N} \\sum_{k=0}^{N-1} Y_k \\cdot \\exp \\left( i\\cdot 2\\pi\\frac{k}{N} n \\right)$$ 위 식을 보면 k의 range가 0부터 \\(N-1\\)로 변화했음을 알 수 있다. 이때 Spectrum \\(Y_{k}\\)를 원래의 시계열 데이터에 대한 퓨리에 변환값이라고 하죠. $$Y_k = \\sum_{n=0}^{N-1} y_n\\cdot \\exp \\left( -i\\cdot 2\\pi\\frac{k}{N} n \\right)$$ \\(y_{n}\\) : input signal \\(n\\) : Discrete time index \\(k\\) : discrete frequency index \\(Y_{k}\\) : k번째 frequeny에 대한 Spectrum의 값 123456789def DFT(x): N = len(x) X = np.array([]) nv = np.arange(N) for k in range(N): s = np.exp(1j*2*np.pi*k/N*nv) X = np.append(X, sum(x*np.conjugate(s))) return X STFT (Short-Time Fourier Transform)FFT는 시간에 흐름에 따라 신호의 수파수가 변했을때, 어느 시간대에 주파수가 변하는지 모르게 됩니다. 이러한 한계를 극복하기 위해서, STFT는 시간의 길이를 나눠서 이제 퓨리에 변환을 하게 됩니다. 즉 FFT를 했을때는 Time domina에 대한 정보가 날아가게 되는 것이죠. 주파수의 특성이 시간에 따라 달라지는 사운드를 분석하는 방법입니다. 일반적으로 우리가 사용하는 signal 데이터에 적합하다. 시계열 데이터를 일정한 시간 구간 (window size)로 나누고, 각 구간에 대해서 스펙트럼을 구하는 데이터이다. 이는 Time-frequency 2차원 데이터로 표현이 됩니다. $$X(l,k) = \\sum_{n=0}^{N-1} w(n) x(n+lH)\\exp^{\\frac{-2\\pi k n}{N}}$$ \\(N\\) : FFT size Window를 얼마나 많은 주파수 밴드로 나누는가 입니다. Duration 샘플링 레이트를 window로 나눈 값입니다. $$T= window/SR$$ T(Window) = 5T(Signal), duration은 신호주기보다 5배 이상 길게 잡아야한다. 440Hz 신호의 window size는 5*(1/440)이 됩니다. \\(w(n)\\) : Window function 일반적으로 Hann window가 쓰입니다. \\(n\\) : Window size Window 함수에 들어가는 Sample의 양입니다. 작을수록 Low-frequency resolution을 가지게 되고, high-time resolution을 가집니다. 길수록 High-frequency, low time resolution을 가집니다. \\(H\\) : Hop size 윈도우가 겹치는 사이즈입니다. 일반적으로는 1/4정도를 겹치게 합니다. STFT의 결과는 즉 시간의 흐름(Window)에 따른 Frequency영역별 Amplitude를 반환합니다. 1234567sr = 16000 # sample rateT = 2.0 # secondst = np.linspace(0, T, int(T * sr), endpoint=False) # time variablex = 0.5 * np.sin(2 * np.pi * 440 * t) # pure sine wave at 440 Hz# y = 0.5*numpy.sin(2*numpy.pi*400*t)ipd.Audio(x, rate=sr) # load a NumPy array 12345678910111213141516print(len(y))D = librosa.stft(y)print(D.shape, D)# phase 에 대한 정보를 날린다.D_mag = np.abs(D)print(D_mag)print(D_mag.shape)magnitude, phase = librosa.magphase(D)print(magnitude)print(magnitude.shape)print(magnitude-D_mag) 48944 (1025, 96) [[-2.1494275e-01+0.0000000e+00j -2.0992082e-01+0.0000000e+00j -2.0418610e-01+0.0000000e+00j ... -1.9438802e-01+0.0000000e+00j -1.9518623e-01+0.0000000e+00j -2.3163199e-01+0.0000000e+00j] [ 9.3493842e-02+6.7762636e-21j 1.2481287e-01+4.8880498e-03j 7.3961377e-02+1.3274251e-03j ... 7.7925511e-02-1.7781712e-02j 9.6285135e-02+1.7115690e-02j 1.1564651e-01-5.2810002e-02j] [ 1.9829417e-02+8.2818238e-19j -3.1706840e-02+1.5587136e-02j 5.7078212e-02-2.0519590e-02j ... 2.3265863e-02+7.6752454e-02j 3.0044108e-03-6.0352467e-02j 5.4616658e-03+6.8522707e-02j] ... [-5.3125373e-03-1.2618632e-18j 3.4157380e-03-1.7295172e-03j -1.8859134e-03-3.5993013e-04j ... -7.6227036e-04-9.3025468e-05j -1.8814437e-04-8.4138475e-05j 4.7763987e-04-5.3400453e-04j] [ 2.1248308e-03+1.5585406e-19j -1.4035926e-03+8.0862024e-05j 2.4144542e-03+3.4830419e-04j ... -2.3595782e-04+1.1687888e-03j 1.1331354e-04+1.2911476e-04j 2.8909228e-04+3.3650018e-04j] [-8.1756472e-04+0.0000000e+00j -9.3529455e-04+0.0000000e+00j -1.4104146e-03+0.0000000e+00j ... 1.3452002e-03+0.0000000e+00j -9.2299597e-06+0.0000000e+00j -4.9439305e-04+0.0000000e+00j]] [[2.1494275e-01 2.0992082e-01 2.0418610e-01 ... 1.9438802e-01 1.9518623e-01 2.3163199e-01] [9.3493842e-02 1.2490856e-01 7.3973291e-02 ... 7.9928555e-02 9.7794548e-02 1.2713383e-01] [1.9829417e-02 3.5331041e-02 6.0654562e-02 ... 8.0201246e-02 6.0427204e-02 6.8740025e-02] ... [5.3125373e-03 3.8286415e-03 1.9199529e-03 ... 7.6792570e-04 2.0610093e-04 7.1645004e-04] [2.1248308e-03 1.4059199e-03 2.4394479e-03 ... 1.1923688e-03 1.7178644e-04 4.4362905e-04] [8.1756472e-04 9.3529455e-04 1.4104146e-03 ... 1.3452002e-03 9.2299597e-06 4.9439305e-04]] (1025, 96) [[2.1494275e-01 2.0992082e-01 2.0418610e-01 ... 1.9438802e-01 1.9518623e-01 2.3163199e-01] [9.3493842e-02 1.2490856e-01 7.3973291e-02 ... 7.9928555e-02 9.7794548e-02 1.2713383e-01] [1.9829417e-02 3.5331041e-02 6.0654562e-02 ... 8.0201246e-02 6.0427204e-02 6.8740025e-02] ... [5.3125373e-03 3.8286415e-03 1.9199529e-03 ... 7.6792570e-04 2.0610093e-04 7.1645004e-04] [2.1248308e-03 1.4059199e-03 2.4394479e-03 ... 1.1923688e-03 1.7178644e-04 4.4362905e-04] [8.1756472e-04 9.3529455e-04 1.4104146e-03 ... 1.3452002e-03 9.2299597e-06 4.9439305e-04]] (1025, 96) [[0. 0. 0. ... 0. 0. 0.] [0. 0. 0. ... 0. 0. 0.] [0. 0. 0. ... 0. 0. 0.] ... [0. 0. 0. ... 0. 0. 0.] [0. 0. 0. ... 0. 0. 0.] [0. 0. 0. ... 0. 0. 0.]] 123456S = librosa.core.stft(audio_np, n_fft=1024, hop_length=512, win_length=1024)D = np.abs(S)**2log_S = librosa.power_to_db(S, ref=np.max) #소리의 단위를 db로 바꿈 plt.figure(figsize=(12,4))librosa.display.specshow(log_S, sr=16000, x_axis='time') Window function?위에서 Window function과 Window size라는 이야기가 나오고 있습니다. 윈도우 Function과 Size는 왜 쓰는 것이며 어떨때 쓰는 것일까요? Window function의 주된 기능은 main-lobe의 width와 side-lobe의 레벨의 Trade-off 를 제어해 준다는 장점이 있습니다. 그리고 깁스 현상을 막아주는 고마운 친구이기도 하죠. 지금나온 main-lobe, side-bloe, 깁스현상은 무엇일까요? 123456789101112def frame_audio(audio, FFT_size=1024, hop_size=20, sample_rate = 22050): audio = np.pad(audio, int(FFT_size/2), mode='reflect') frame_len = np.round(sample_rate*hop_size / 1000).astype(int) frame_num = int((len(audio) - FFT_size) / frame_len) + 1 frames = np.zeros((frame_num, FFT_size)) for n in range(frame_num): frames[n] = audio[n*frame_len:n*frame_len+FFT_size] return framesaudio_framed = frame_audio(audio_np)print(&quot;Framed audio shape: {}&quot;.format(audio_framed.shape)) Framed audio shape: (469, 1024) 123456789101112131415161718from scipy import signalwindow = signal.get_window(&quot;hann&quot;, 1024, fftbins=True)audio_win = audio_framed * windowind = 2plt.figure(figsize=(15,6))plt.subplot(3,1,1)plt.plot(window)plt.grid(True)plt.subplot(3,1,2)plt.plot(audio_framed[ind])plt.grid(True)plt.subplot(3,1,3)plt.plot(audio_win[ind])plt.grid(True)plt.show() 플롯을 보게 된다면 windowing을 적용하기전 plot은 끝부분이 다 다르지만, windowing을 지나고 나서 나오는 plot은 끝이 0 으로 일치한다는 특성을 볼 수 있습니다. Window size?윈도우 사이즈는 일반적으로 time과 frequency의 resolutions을 제어해 줍니다. short-window : 낮은 frequency resolution, 높은 time-resolution을 가지게 됩니다. Long-window : 높은 frequency resolution을 가지며, 낮은 time-resolution을 가지게 됩니다. SpectrogramSpectrogram을 추출하는 방법을 고민해봅시다.일반적으로 프로세스는 입력신호에 대해서 window function을 통과하여 window size만큼 sampling 된 data를 받아서 Discrete Fourier Transform을 거치게 됩니다. DFT를 거친 신호들은 Frequency와 Amplitude의 영역을 가지는 Spectrum이 됩니다. 이후 이를 90도로 회전시켜서, time domain으로 stack하게 됩니다. Spectrogram은 Frequency Scale에 대해서 Scaling이 이루어집니다. 주파수 영역에 Scaling을 하는 이유는, 인간의 주파수를 인식하는 방식과 연관이 있습니다. 일반적으로 사람은, 인접한 주파수를 크게 구별하지 못합니다. 그 이유는 우리의 인지기관이 categorical한 구분을 하기 때문입니다. 때문에 우리는 주파수들의 Bin의 그룹을 만들고 이들을 합하는 방식으로, 주파수 영역에서 얼마만큼의 에너지가 있는지를 찾아볼 것입니다. 일반적으로는 인간이 적은 주파수에 더 풍부한 정보를 사용하기때문에, 주파수가 올라갈수록 필터의 폭이 높아지면서 고주파는 거의 고려를 안하게 됩니다. 따라서 아래 frequency scale은 어떤 방식을 통해 저주파수대 영역을 고려할 것이가에 대한 고민이 남아 있습니다. Linear frequency scale일반적으로 single tone(순음)들의 배음 구조를 파악하기 좋습니다. 하지만 분포가 저주파수 영역에 기울어져(skewed) 있습니다. Mel Scale멜 스펙트럼은 주파수 단위를 다음 공식에 따라 멜 단위로 바꾼 것을 의미합니다. $$m = 2595 \\log_{10}\\left(1 + \\frac{f}{700}\\right)$$일반적으로는 mel-scaled bin을 FFT size보다 조금더 작게 만드는게 일반적입니다. 1234# STFTS = librosa.core.stft(audio_np, n_fft=1024, hop_length=512, win_length=1024)# phase 에 대한 정보를 날린다.D = np.abs(S)**2 1234# mel spectrogram (512 --&gt; 40)mel_basis = librosa.filters.mel(sr, 1024, n_mels=40)mel_S = np.dot(mel_basis, D)mel_S.shape (40, 404) 123456789import librosa.displayS = librosa.feature.melspectrogram(audio_np, sr=sr, n_mels = 128)log_S = librosa.power_to_db(S, ref=np.max)plt.figure(figsize=(12,4))librosa.display.specshow(log_S, sr=sr, x_axis='time', y_axis='mel')plt.title('Mel power sepctrogram')plt.colorbar(format='%+02.0f dB')plt.tight_layout() 123456789import librosa.displayS = librosa.feature.melspectrogram(audio_np, sr=sr, n_mels = 256)log_S = librosa.power_to_db(S, ref=np.max)plt.figure(figsize=(12,4))librosa.display.specshow(log_S, sr=sr, x_axis='time', y_axis='mel')plt.title('Mel power sepctrogram')plt.colorbar(format='%+02.0f dB')plt.tight_layout() Bark scale귀가 인식하는 주파수의 영역은 대략 20Hz~2000Hz 로 가정합니다. 하지만 주파수에 대한 사람의 인식은 비선형적입니다. 귀와 뇌의 가청대역을 24개의 대역으로 나눈것을 Bark라고 합니다! Bark scale은 500Hz이하에서는 100Hz의 대역폭을 가지며, 500Hz 이상에서는 각 대역의 중심수파수의 대략 20%에 해당하는 대역폭을 가지게 됩니다. 20, 100, 200, 300, 400, 510, 630, 770, 920, 1080, 1270, 1480, 1720, 2000, 2320, 2700, 3150, 3700, 4400, 5300, 6400, 7700, 9500, 12000, 15500 ( Hz ) Log compression\\(10 * log10(\\frac{S}{ref})\\)의 단위로 신호를 스케일링 합니다. 이는 spectrogram을 데시벨 유닛으로 전환해 줍니다. 123#log compressionlog_mel_S = librosa.power_to_db(mel_S)log_mel_S.shape (40, 404) Discrete cosine transform (DCT)DCT는 n개의 데이터를 n개의 코사인 함수의 합으로 표현하여 데이터의 양을 줄이는 방식입니다. 저 주파수에 에너지가 집중되고 고 주파수 영역에 에너지가 감소합니다. Filter Bank는 모두 Overlapping 되어 있기 때문에 Filter Bank 에너지들 사이에 상관관계가 존재하기 때문이다. DCT는 에너지들 사이에 이러한 상관관계를 분리 해주는 역활을 해줍니다. 하지만 여기서 26개 DCT Coefficient 들 중 12만 남겨야 하는데, 그 이유는 DCT Coefficient 가 많으면, Filter Bank 에너지의 빠른 변화를 나타내게 되고, 이것은 음성인식의 성능을 낮추게 됩니다. 12345# mfcc (DCT)mfcc = librosa.feature.mfcc(S=log_mel_S, n_mfcc=13)mfcc = mfcc.astype(np.float32) # to save the memory (64 to 32 bits)plt.figure(figsize=(12,4))librosa.display.specshow(mfcc) &lt;matplotlib.axes._subplots.AxesSubplot at 0x7f3a8975cc88&gt; 1234567891011mfcc = librosa.feature.mfcc(S=log_S, n_mfcc=13)delta2_mfcc = librosa.feature.delta(mfcc, order=2)print(delta2_mfcc.shape)plt.figure(figsize=(12,4))librosa.display.specshow(delta2_mfcc)plt.ylabel('MFCC coeffs')plt.xlabel('Time')plt.title('MFCC')plt.colorbar()plt.tight_layout() (13, 148) 12345678def change_pitch(data, sr): y_pitch = data.copy() bins_per_octave = 12 pitch_pm = 2 pitch_change = pitch_pm * 2 * (np.random.uniform()) y_pitch = librosa.effects.pitch_shift(y_pitch.astype('float64'), sr, n_steps=pitch_change, bins_per_octave=bins_per_octave) return y_pitch 123456def waveform_aug(waveform,sr): y = change_pitch(waveform, sr) fig = plt.figure(figsize = (14,5)) librosa.display.waveplot(y, sr=sr) ipd.display(ipd.Audio(data=y, rate=sr)) return y, sr 12ipd.display(ipd.Audio(data=audio_np, rate=sr))y, sr = waveform_aug(audio_np, 16000) 1234567S = librosa.feature.melspectrogram(audio_np, sr=sr, n_mels = 128)log_S = librosa.power_to_db(S, ref=np.max)plt.figure(figsize=(12,4))librosa.display.specshow(log_S, sr=sr, x_axis='time', y_axis='mel')plt.title('Mel power sepctrogram')plt.colorbar(format='%+02.0f dB')plt.tight_layout() 1np.random.uniform(low=1.5, high=3) 2.6892527992385458 12345def value_aug(data): y_aug = data.copy() dyn_change = np.random.uniform(low=1.5, high=3) y_aug = y_aug * dyn_change return y_aug 1234def add_noise(data): noise = np.random.randn(len(data)) data_noise = data + 0.005 * noise return data_noise 123def hpss(data): y_harmonic, y_percussive = librosa.effects.hpss(data.astype('float64')) return y_harmonic, y_percussive 12def shift(data): return np.roll(data, 1600) 123456789def stretch(data, rate=1): input_length = len(data) streching = librosa.effects.time_stretch(data, rate) if len(streching) &gt; input_length: streching = streching[:input_length] else: streching = np.pad(streching, (0, max(0, input_length - len(streching))), &quot;constant&quot;) return streching 12345678910def change_pitch_and_speed(data): y_pitch_speed = data.copy() # you can change low and high here length_change = np.random.uniform(low=0.8, high=1) speed_fac = 1.0 / length_change tmp = np.interp(np.arange(0, len(y_pitch_speed), speed_fac), np.arange(0, len(y_pitch_speed)), y_pitch_speed) minlen = min(y_pitch_speed.shape[0], tmp.shape[0]) y_pitch_speed *= 0 y_pitch_speed[0:minlen] = tmp[0:minlen] return y_pitch_speed 1234567data_noise = add_noise(audio_np)data_roll = shift(audio_np)data_stretch = stretch(audio_np)pitch_speed = change_pitch_and_speed(audio_np)value = value_aug(audio_np)y_harmonic, y_percussive = hpss(audio_np)y_shift = shift(audio_np) 1ipd.Audio(data_noise, rate=fs) 12345678import matplotlib.pyplot as pltlibrosa.display.specshow(librosa.amplitude_to_db(magnitude, ref=np.max), y_axis='log', x_axis='time')plt.title('Power spectrogram')plt.colorbar(format='%+2.0f dB')plt.tight_layout()plt.show() 1234567891011mel_s = librosa.feature.melspectrogram(y=y, sr=sr)print(mel_s.shape)import matplotlib.pyplot as pltlibrosa.display.specshow(librosa.amplitude_to_db(mel_s, ref=np.max), y_axis='log', x_axis='time')plt.title('Power spectrogram')plt.colorbar(format='%+2.0f dB')plt.tight_layout()plt.show() (128, 96) 1234567891011mfccs = librosa.feature.mfcc(y=y, sr=sr, n_mfcc=40)print(mfccs.shape)import matplotlib.pyplot as pltplt.figure(figsize=(10, 4))librosa.display.specshow(mfccs, x_axis='time')plt.colorbar()plt.title('MFCC')plt.tight_layout()plt.show() (40, 96) 12345678import matplotlib.pyplot as pltlibrosa.display.specshow(librosa.amplitude_to_db(mfccs, ref=np.max), y_axis='log', x_axis='time')plt.title('Power spectrogram')plt.colorbar(format='%+2.0f dB')plt.tight_layout()plt.show() 들리는 소리 = 배경잡음 + 목소리12filename_wav = &quot;./wav/voice.wav&quot;filename_noise = &quot;./wav/cafe_noise.wav&quot; 12import IPython.display as ipdipd.Audio(filename_wav) 12import IPython.display as ipdipd.Audio(filename_noise) 123456789101112data_wav, sr_wav = librosa.load(filename_wav, mono=True, sr=16000)data_noise, sr_noise = librosa.load(filename_noise, mono=True, sr=16000)print(data_wav.shape)print(data_noise.shape)# 전체적으로 들리는 소리는 소리의 합( 배경음 + 목소리 )data_wav_noise = data_wav[:] + data_noise[:len(data_wav)]pos=10print(&quot;wav: {:.8f}, noise {:.8f}, wav+noise: {:.8f}&quot;.format(data_wav[pos], data_noise[pos], data_wav_noise[pos])) (48944,) (1044712,) wav: -0.00009155, noise -0.00003052, wav + noise: -0.00012207 1ipd.Audio(data_wav_noise, rate=16000)","link":"/2020/12/03/%EB%94%A5%EB%9F%AC%EB%8B%9D-%EC%9E%85%EB%AC%B8%ED%95%98%EA%B8%B0-9/"}],"tags":[{"name":"R","slug":"R","link":"/tags/R/"},{"name":"coding","slug":"coding","link":"/tags/coding/"},{"name":"HEXO","slug":"HEXO","link":"/tags/HEXO/"},{"name":"blog","slug":"blog","link":"/tags/blog/"},{"name":"ML","slug":"ML","link":"/tags/ML/"},{"name":"DL","slug":"DL","link":"/tags/DL/"},{"name":"GAN","slug":"GAN","link":"/tags/GAN/"},{"name":"Tensorflow2","slug":"Tensorflow2","link":"/tags/Tensorflow2/"},{"name":"TF2","slug":"TF2","link":"/tags/TF2/"},{"name":"Music EDA","slug":"Music-EDA","link":"/tags/Music-EDA/"},{"name":"Script","slug":"Script","link":"/tags/Script/"},{"name":"Linear Algebra","slug":"Linear-Algebra","link":"/tags/Linear-Algebra/"},{"name":"Audio","slug":"Audio","link":"/tags/Audio/"},{"name":"Paper","slug":"Paper","link":"/tags/Paper/"}],"categories":[{"name":"Code","slug":"Code","link":"/categories/Code/"},{"name":"GitPage","slug":"GitPage","link":"/categories/GitPage/"},{"name":"Machine Learning","slug":"Machine-Learning","link":"/categories/Machine-Learning/"},{"name":"R","slug":"Code/R","link":"/categories/Code/R/"},{"name":"Hexo","slug":"GitPage/Hexo","link":"/categories/GitPage/Hexo/"},{"name":"ilsang","slug":"ilsang","link":"/categories/ilsang/"},{"name":"Music","slug":"ilsang/Music","link":"/categories/ilsang/Music/"},{"name":"Papers","slug":"Machine-Learning/Papers","link":"/categories/Machine-Learning/Papers/"}]}